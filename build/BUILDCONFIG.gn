# Basic build configuration
# like OS, architecture, debug, etc.
if (target_os == "") {
  target_os = host_os
}

if (target_cpu == "") {
  if (target_os == "android") {
    # If we're building for Android, we should assume that we want to
    # build for ARM by default, not the host_cpu (which is likely x64).
    # This allows us to not have to specify both target_os and target_cpu
    # on the command line.
    target_cpu = "arm"
  } else {
    target_cpu = host_cpu
  }
}

if (current_cpu == "") {
  current_cpu = target_cpu
}
if (current_os == "") {
  current_os = target_os
}

declare_args() {
  # Build in debug mode?
  is_debug = true

  # Build standalone logger application?
  is_standalone_logger = false
}

# is_FOO booleans for convenience in writing OS-based
# conditions.
is_linux = current_os == "linux"
is_mac = current_os == "mac"
is_win = current_os == "win" || current_os == "winuwp"
is_fuchsia = current_os == "fuchsia"
is_posix = !is_win && !is_fuchsia

# GCC as default, MSVC on Windows
set_default_toolchain("//build/toolchain:gcc")

# The main compiler configuration
# All binary targets will get this list of configs by default.
default_compiler_configs = [
  "//build/config:compiler",
]

# Debug/release-related defines.
if (is_debug) {
  default_compiler_configs += [ "//build:debug" ]
} else {
  default_compiler_configs += [ "//build:release" ]
}

# GCC/Clang specific workarounds
if (is_posix) {
  if (!is_mac) {
    default_compiler_configs += [
      "//build/toolchain:symbol_visibility_hidden",
      "//build/toolchain:toolchain"
    ]
  }
}

# Baseline flags for Windows programs
if (is_win) {
  default_compiler_configs += [
    "//build/config:windows",
  ]
}

# Apply that default list to the binary target types.
set_defaults("executable") {
  configs = default_compiler_configs
  configs += [ "//build:executable_config" ]
  public_configs = [ "//build:includes" ]
}
# Static libraries and source sets use only the compiler ones.
set_defaults("static_library") {
  configs = default_compiler_configs
  configs += [ "//build:shared_library_config" ]
  public_configs = [ "//build:includes" ]
}
# Shared library gets rpath as well
set_defaults("shared_library") {
  configs = default_compiler_configs
  configs += [ "//build:shared_library_config" ]
  public_configs = [ "//build:includes" ]
}
set_defaults("source_set") {
  configs = default_compiler_configs
  public_configs = [ "//build:includes" ]
}
